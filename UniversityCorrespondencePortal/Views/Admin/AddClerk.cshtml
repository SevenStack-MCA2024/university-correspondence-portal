@model List<UniversityCorrespondencePortal.Models.ViewModels.ClerkViewModel>

@{
    ViewBag.Title = "Add Clerk";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    var editId = ViewBag.EditID as string;
}

<h2 class="mb-3">Manage Clerks</h2>

@if (TempData["Message"] != null)
{
    <div class="alert alert-success">@TempData["Message"]</div>
}
@if (TempData["Error"] != null)
{
    <div class="alert alert-danger">@TempData["Error"]</div>
}

<div class="d-flex justify-content-between mb-3 align-items-end">
    <div class="d-flex gap-2" id="filterControls">
        <input type="text" id="searchInput" class="form-control" placeholder="Search..." />
        <select id="departmentFilter" class="form-select">
            <option value="">All Departments</option>
            @foreach (var dept in ViewBag.DepartmentList as List<SelectListItem>)
            {
                <option value="@dept.Text">@dept.Text</option>
            }
        </select>
        <select id="statusFilter" class="form-select">
            <option value="">All Status</option>
            <option value="Active">Active</option>
            <option value="Inactive">Inactive</option>
        </select>
        <button class="btn btn-primary" onclick="applyFilters()">Apply</button>
        <button class="btn btn-secondary" onclick="clearFilters()">Clear</button>
    </div>
    <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#addClerkModal">Add New Clerk</button>
</div>

<table class="table table-bordered table-striped" id="clerkTable">
    <thead class="table-light">
        <tr>
            <th>Clerk ID</th>
            <th>Name</th>
            <th>Email</th>
            <th>Phone</th>
            <th>Department</th>
            <th>Status</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var clerk in Model)
        {
            if (clerk.ClerkID == editId)
            {
                <tr>
                    <form method="post" action="@Url.Action("UpdateClerk", "Admin")" novalidate>
                        @Html.AntiForgeryToken()
                    <td>
                        @clerk.ClerkID
                        <input type="hidden" name="ClerkID" value="@clerk.ClerkID" />
                    </td>
                    <td>
                        <input type="text" name="Name" class="form-control" value="@clerk.Name" required minlength="3"
                               oninvalid="this.setCustomValidity('Please enter at least 3 characters')"
                               oninput="this.setCustomValidity('')" />
                    </td>
                    <td>
                        <input type="email" name="Email" class="form-control" value="@clerk.Email" required
                               pattern="^[a-zA-Z0-9._%+-]+&#64;[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"
                               oninvalid="this.setCustomValidity('Please enter a valid email address')"
                               oninput="this.setCustomValidity('')" />
                    </td>
                    <td>
                        <input type="text" name="Phone" class="form-control" value="@clerk.Phone" required pattern="^[0-9]{10}$"
                               oninvalid="this.setCustomValidity('Please enter a valid 10-digit phone number')"
                               oninput="this.setCustomValidity('')" />
                    </td>
                    <td>@clerk.DepartmentName</td>
                    <td>@(clerk.IsActive ? "Active" : "Inactive")</td>
                    <td>
                        <button type="submit" class="btn btn-sm btn-success">Save</button>
                        <a href="@Url.Action("AddClerk", "Admin")" class="btn btn-sm btn-secondary">Cancel</a>
                    </td>
                    </form>
                </tr>

            }
            else
            {
                <tr>
                    <td>@clerk.ClerkID</td>
                    <td>@clerk.Name</td>
                    <td>@clerk.Email</td>
                    <td>@clerk.Phone</td>
                    <td>@clerk.DepartmentName</td>
                    <td>@(clerk.IsActive ? "Active" : "Inactive")</td>
                    <td class="d-flex gap-1">
                        <a href="@Url.Action("AddClerk", "Admin", new { editId = clerk.ClerkID })" class="btn btn-sm btn-primary">Edit</a>
                        @if (clerk.IsActive)
                        {
                            <form method="post" action="@Url.Action("DeactivateClerk", "Admin")" style="display:inline;">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="clerkId" value="@clerk.ClerkID" />
                                <button type="submit" class="btn btn-sm btn-warning">Deactivate</button>
                            </form>
                        }
                        else
                        {
                            <form method="post" action="@Url.Action("ActivateClerk", "Admin")" style="display:inline;">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="clerkId" value="@clerk.ClerkID" />
                                <button type="submit" class="btn btn-sm btn-success">Activate</button>
                            </form>
                        }
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

<!-- Add Clerk Modal -->
<!-- Add Clerk Modal -->
<div class="modal fade" id="addClerkModal" tabindex="-1" aria-labelledby="addClerkModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <form method="post" action="@Url.Action("CreateClerk", "Admin")" class="modal-content" novalidate>
            @Html.AntiForgeryToken()
            <div class="modal-header">
                <h5 class="modal-title" id="addClerkModalLabel">Add New Clerk</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="ClerkID" class="form-label">Clerk ID</label>
                    <input type="text" name="ClerkID" class="form-control" required
                           oninvalid="this.setCustomValidity('Please enter Clerk ID')"
                           oninput="this.setCustomValidity('')" />
                </div>
                <div class="mb-3">
                    <label for="Name" class="form-label">Name</label>
                    <input type="text" name="Name" class="form-control" required minlength="3"
                           oninvalid="this.setCustomValidity('Please enter at least 3 characters')"
                           oninput="this.setCustomValidity('')" />
                </div>
                <div class="mb-3">
                    <label for="Email" class="form-label">Email</label>
                    <input type="email" name="Email" class="form-control" required
                           pattern="^[a-zA-Z0-9._%+-]+&#64;[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"
                           oninvalid="this.setCustomValidity('Please enter a valid email address')"
                           oninput="this.setCustomValidity('')" />
                </div>
                <div class="mb-3">
                    <label for="Phone" class="form-label">Phone</label>
                    <input type="text" name="Phone" class="form-control" required pattern="^[0-9]{10}$"
                           oninvalid="this.setCustomValidity('Please enter a valid 10-digit phone number')"
                           oninput="this.setCustomValidity('')" />
                </div>
                <div class="mb-3">
                    <label for="DepartmentID" class="form-label">Department</label>
                    <select name="DepartmentID" class="form-select" required
                            oninvalid="this.setCustomValidity('Please select a department')"
                            oninput="this.setCustomValidity('')">
                        <option value="">-- Select Department --</option>
                        @foreach (var dept in ViewBag.DepartmentList as List<SelectListItem>)
                        {
                            <option value="@dept.Value">@dept.Text</option>
                        }
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="submit" class="btn btn-primary">Add Clerk</button>
            </div>
        </form>
    </div>
</div>
@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        function applyFilters() {
            var searchTerm = document.getElementById("searchInput").value.toLowerCase();
            var departmentFilter = document.getElementById("departmentFilter").value.toLowerCase();
            var statusFilter = document.getElementById("statusFilter").value.toLowerCase();

            var rows = document.querySelectorAll("#clerkTable tbody tr");
            rows.forEach(function (row) {
                var text = row.innerText.toLowerCase();
                var dept = row.cells[4].innerText.toLowerCase();
                var status = row.cells[5].innerText.toLowerCase();

                var matchesSearch = text.includes(searchTerm);
                var matchesDept = departmentFilter === "" || dept === departmentFilter;
                var matchesStatus = statusFilter === "" || status === statusFilter;

                if (matchesSearch && matchesDept && matchesStatus) {
                    row.style.display = "";
                } else {
                    row.style.display = "none";
                }
            });
        }

        function clearFilters() {
            document.getElementById("searchInput").value = "";
            document.getElementById("departmentFilter").value = "";
            document.getElementById("statusFilter").value = "";
            applyFilters();
        }
    </script>

    <!-- Bootstrap 5 Frontend Validation Script -->
    <script>
        (() => {
            'use strict';
            const forms = document.querySelectorAll('form');

            Array.from(forms).forEach(form => {
                form.addEventListener('submit', event => {
                    if (!form.checkValidity()) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    form.classList.add('was-validated');
                }, false);
            });
        })();
    </script>
}


