@model List<UniversityCorrespondencePortal.Models.ViewModels.StaffViewModel>
@{
    ViewBag.Title = "Add Staff";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    var editId = TempData["EditID"] != null ? Convert.ToInt32(TempData["EditID"]) : 0;
}

@if (TempData["Message"] != null)
{
    <div class="alert alert-success">@TempData["Message"]</div>
}
@if (TempData["Error"] != null)
{
    <div class="alert alert-danger">@TempData["Error"]</div>
}

<div class="container-fluid mt-3">
    <h2 class="mb-3">Staff Management</h2>

    <!-- Add Staff Button -->
    <div class="mb-3 text-end">
        <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#addStaffModal">
            <i class="fas fa-plus"></i> Add Staff
        </button>
    </div>

    <!-- Search and Filter Section -->
    <div class="row mb-3">
        <div class="col-md-3">
            <input type="text" id="searchInput" class="form-control" placeholder="Search by Name, Email, Phone" />
        </div>
        <div class="col-md-3">
            <select id="departmentFilter" class="form-control">
                <option value="">All Departments</option>
                @foreach (var dept in ViewBag.DepartmentList as List<UniversityCorrespondencePortal.Models.Department>)
                {
                    <option value="@dept.DepartmentName">@dept.DepartmentName</option>
                }
            </select>
        </div>
        <div class="col-md-3">
            <select id="designationFilter" class="form-control">
                <option value="">All Designations</option>
                @foreach (var designation in Model.Select(m => m.Designation).Distinct())
                {
                    <option value="@designation">@designation</option>
                }
            </select>
        </div>
        <div class="col-md-2">
            <select id="statusFilter" class="form-control">
                <option value="">All Statuses</option>
                <option value="Active">Active</option>
                <option value="Inactive">Inactive</option>
            </select>
        </div>
        <div class="col-md-1 d-flex gap-1">
            <button class="btn btn-primary w-100" onclick="applyFilters()">Apply</button>
            <button class="btn btn-secondary w-100" onclick="clearFilters()">Clear</button>
        </div>
    </div>

    <!-- Table Container -->
    <div class="border rounded" style="height: 60vh; overflow: hidden; display: flex; flex-direction: column;">
        <div class="table-responsive" style="flex-grow: 1; overflow-y: auto;">
            <table id="staffTable" class="table table-striped table-bordered align-middle m-0">
                <thead class="table-dark" style="position: sticky; top: 0; z-index: 1;">
                    <tr>
                        <th style="width: 8%;">Staff ID</th>
                        <th style="width: 15%;">Name</th>
                        <th style="width: 20%;">Email</th>
                        <th style="width: 12%;">Phone</th>
                        <th style="width: 15%;">Designation</th>
                        <th style="width: 15%;">Departments</th>
                        <th style="width: 10%;">Status</th>
                        <th style="width: 15%;">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model.Any())
                    {
                        foreach (var staff in Model)
                        {
                            if (staff.StaffID == editId)
                            {
                                <tr data-name="@staff.Name" data-email="@staff.Email" data-phone="@staff.Phone"
                                    data-department="@staff.Departments" data-designation="@staff.Designation"
                                    data-status="@(staff.IsActive ? "Active" : "Inactive")">
                                    <form method="post" action="@Url.Action("UpdateStaff", "Admin")">
                                    <td>
                                        <input type="hidden" name="StaffID" value="@staff.StaffID" />
                                        @staff.StaffID
                                    </td>
                                    <td><input type="text" name="Name" value="@staff.Name" class="form-control form-control-sm" required /></td>
                                    <td><input type="email" name="Email" value="@staff.Email" class="form-control form-control-sm" required /></td>
                                    <td><input type="text" name="Phone" value="@staff.Phone" class="form-control form-control-sm" required /></td>
                                    <td><input type="text" name="Designation" value="@staff.Designation" class="form-control form-control-sm" required /></td>
                                    <td>@staff.Departments</td>
                                    <td class="text-center">
                                        <span class="badge bg-@(staff.IsActive ? "success" : "danger")">@(staff.IsActive ? "Active" : "Inactive")</span>
                                    </td>
                                    <td class="text-nowrap">
                                        <button type="submit" class="btn btn-sm btn-warning me-1">Save</button>
                                        <a href="@Url.Action("AddStaff", "Admin")" class="btn btn-sm btn-secondary">Cancel</a>
                                    </td>
                                    </form>
                                </tr>
                            }
                            else
                            {
                                <tr data-name="@staff.Name" data-email="@staff.Email" data-phone="@staff.Phone"
                                    data-department="@staff.Departments" data-designation="@staff.Designation"
                                    data-status="@(staff.IsActive ? "Active" : "Inactive")">
                                    <td>@staff.StaffID</td>
                                    <td>@staff.Name</td>
                                    <td>@staff.Email</td>
                                    <td>@staff.Phone</td>
                                    <td>@staff.Designation</td>
                                    <td>@staff.Departments</td>
                                    <td class="text-center">
                                        <span class="badge bg-@(staff.IsActive ? "success" : "danger")">@(staff.IsActive ? "Active" : "Inactive")</span>
                                    </td>
                                    <td class="text-nowrap">
                                        <div class="d-flex gap-1 justify-content-center">
                                            <a href="@Url.Action("AddStaff", "Admin", new { editId = staff.StaffID })"
                                               class="btn btn-sm btn-warning">Edit</a>
                                            <form method="post" action="@Url.Action("ToggleStaffStatus", "Admin")">
                                                @Html.AntiForgeryToken()
                                                <input type="hidden" name="staffId" value="@staff.StaffID" />
                                                <button type="submit" class="btn btn-sm @(staff.IsActive ? "btn-danger" : "btn-success")">
                                                    @(staff.IsActive ? "Deactivate" : "Activate")
                                                </button>
                                            </form>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="8" class="text-center">No staff members found</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Add Staff Modal -->
<!-- Add Staff Modal -->
<div class="modal fade" id="addStaffModal" tabindex="-1" aria-labelledby="addStaffModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <form method="post" action="@Url.Action("CreateStaff", "Admin")" novalidate>
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title" id="addStaffModalLabel">Add New Staff</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body row g-3">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    <div class="col-md-6">
                        <label class="form-label">Name</label>
                        <input type="text" name="Name" class="form-control"
                               required minlength="1" maxlength="100"
                               pattern="^[A-Za-z\s]+$"
                               oninvalid="this.setCustomValidity(
               this.validity.valueMissing ? 'Name is required' :
               this.validity.tooLong ? 'Name cannot exceed 100 characters' :
               this.validity.patternMismatch ? 'Name can only contain letters and spaces' :
               ''
           )"
                               oninput="this.setCustomValidity('')" />
                    </div>

                    <div class="col-md-6">
                        <label class="form-label">Designation</label>
                        <input type="text" name="Designation" class="form-control"
                               required minlength="1" maxlength="50"
                               pattern="^[A-Za-z\s]+$"
                               oninvalid="this.setCustomValidity(
               this.validity.valueMissing ? 'Designation is required' :
               this.validity.tooLong ? 'Designation cannot exceed 50 characters' :
               this.validity.patternMismatch ? 'Designation can only contain letters and spaces' :
               ''
           )"
                               oninput="this.setCustomValidity('')" />
                    </div>


                    <div class="col-md-6">
                        <label class="form-label">Email</label>
                        <input type="email" name="Email" class="form-control" required
                               pattern="^[a-zA-Z0-9._%+-]+&#64;[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"
                               oninvalid="this.setCustomValidity('Please enter a valid email address')"
                               oninput="this.setCustomValidity('')" />

                    </div>

                    <div class="col-md-6">
                        <label class="form-label">Phone</label>
                        <input type="text" name="Phone" class="form-control" required pattern="^[0-9]{10}$"
                               oninvalid="this.setCustomValidity('Please enter a valid 10-digit phone number')"
                               oninput="this.setCustomValidity('')" />
                    </div>

                    

                    <div class="col-md-6">
                        <label class="form-label">Department</label>
                        <select name="DepartmentID" class="form-control" required
                                oninvalid="this.setCustomValidity('Please select a department')"
                                oninput="this.setCustomValidity('')">
                            <option value="">-- Select Department --</option>
                            @foreach (var dept in ViewBag.DepartmentList as List<UniversityCorrespondencePortal.Models.Department>)
                            {
                                <option value="@dept.DepartmentID">@dept.DepartmentName</option>
                            }
                        </select>
                    </div>

                    <div class="col-md-6">
                        <label class="form-label">Status</label>
                        <select name="IsActive" class="form-control" required>
                            <option value="true" selected>Active</option>
                            <option value="false">Inactive</option>
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Save changes</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        function applyFilters() {
            const search = document.getElementById("searchInput").value.toLowerCase();
            const dept = document.getElementById("departmentFilter").value.toLowerCase();
            const desig = document.getElementById("designationFilter").value.toLowerCase();
            const status = document.getElementById("statusFilter").value.toLowerCase();

            const rows = document.querySelectorAll("#staffTable tbody tr");
            rows.forEach(row => {
                const name = row.dataset.name.toLowerCase();
                const email = row.dataset.email.toLowerCase();
                const phone = row.dataset.phone.toLowerCase();
                const department = row.dataset.department.toLowerCase();
                const designation = row.dataset.designation.toLowerCase();
                const rowStatus = row.dataset.status.toLowerCase();

                const matchesSearch = name.includes(search) || email.includes(search) || phone.includes(search);
                const matchesDept = !dept || department.includes(dept);
                const matchesDesig = !desig || designation.includes(desig);
                const matchesStatus = !status || rowStatus === status;

                if (matchesSearch && matchesDept && matchesDesig && matchesStatus) {
                    row.style.display = "";
                } else {
                    row.style.display = "none";
                }
            });
        }

        function clearFilters() {
            document.getElementById("searchInput").value = "";
            document.getElementById("departmentFilter").value = "";
            document.getElementById("designationFilter").value = "";
            document.getElementById("statusFilter").value = "";
            applyFilters(); // Reset view
        }
    </script>

    <!-- Bootstrap 5 validation script -->
    <script>
        (() => {
            'use strict';
            const forms = document.querySelectorAll('form');

            Array.from(forms).forEach(form => {
                form.addEventListener('submit', event => {
                    if (!form.checkValidity()) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    form.classList.add('was-validated');
                }, false);
            });
        })();
    </script>
}

