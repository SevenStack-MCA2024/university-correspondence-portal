@model UniversityCorrespondencePortal.ViewModels.OutwardLetterPageViewModel

@{
    Layout = "~/Views/Shared/_ClerkLayout.cshtml";
    ViewBag.Title = "Outward Letters";
}

<h2 class="mb-4">📤 Outward Letters</h2>

@if (TempData["OutwardSuccess"] != null)
{
    <div class="alert alert-success mt-3">
        ✅ @TempData["OutwardSuccess"]
    </div>
}
@if (TempData["OutwardError"] != null)
{
    <div class="alert alert-danger mt-3">
        ❌ @TempData["OutwardError"]
    </div>
}

<div class="text-end mb-3">
    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#outwardLetterModal">
        ➕ Add Outward Letter
    </button>
</div>

<table class="table table-bordered table-hover table-striped" id="outwardTable">
    <thead class="table-success">
        <tr>
            <th>Letter No</th>
            <th>Outward No</th>
            <th>Date</th>
            <th>Time</th>
            <th>Sender Name</th>
            <th>Receiver Name</th>
            <th>Receiver Department</th>
            <th>Subject</th>
            <th>Reference ID</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @if (Model.OutwardLetters != null && Model.OutwardLetters.Any())
        {
            foreach (var letter in Model.OutwardLetters)
            {
                <tr data-letter-id="@letter.LetterID">
                    <td class="td-letterno">@letter.LetterNo</td>
                    <td class="td-outwardno">@letter.OutwardNumber</td>
                    <td>@(letter.Date?.ToString("dd/MM/yyyy"))</td>
                    <td>@(letter.Time.HasValue ? letter.Time.Value.ToString(@"hh\:mm") : "")</td>
                    <td class="td-sender">@letter.SenderName</td>
                    <td class="td-receivername">@letter.ReceiverName</td>
                    <td class="td-receiverdept">@letter.ReceiverDepartment</td>
                    <td>@letter.Subject</td>
                    <td class="td-reference">@letter.ReferenceID</td>
                    <td>
                        <button class="btn btn-sm btn-info btn-view" type="button" data-letter-id="@letter.LetterID">👁 View</button>
                        <button class="btn btn-sm btn-warning btn-inline-edit" type="button">✏ Edit</button>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="10" class="text-center">No outward letters found.</td>
            </tr>
        }
    </tbody>
</table>

<!-- ---------- Shared View Modal (single) ---------- -->
<div class="modal fade" id="viewModal" tabindex="-1" aria-labelledby="viewModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-info text-white">
                <h5 class="modal-title" id="viewModalLabel">📄 View Outward Letter</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <!-- placeholders filled by JS -->
                <dl class="row">
                    <dt class="col-sm-4">Letter No</dt>
                    <dd class="col-sm-8" id="vLetterNo"></dd>
                    <dt class="col-sm-4">Outward Number</dt>
                    <dd class="col-sm-8" id="vOutwardNo"></dd>
                    <dt class="col-sm-4">Date</dt>
                    <dd class="col-sm-8" id="vDate"></dd>
                    <dt class="col-sm-4">Time</dt>
                    <dd class="col-sm-8" id="vTime"></dd>
                    <dt class="col-sm-4">Delivery Mode</dt>
                    <dd class="col-sm-8" id="vDelivery"></dd>
                    <dt class="col-sm-4">Reference ID</dt>
                    <dd class="col-sm-8" id="vReference"></dd>
                    <dt class="col-sm-4">Subject</dt>
                    <dd class="col-sm-8" id="vSubject"></dd>
                    <dt class="col-sm-4">Remarks</dt>
                    <dd class="col-sm-8" id="vRemarks"></dd>
                    <dt class="col-sm-4">Priority</dt>
                    <dd class="col-sm-8" id="vPriority"></dd>
                    <dt class="col-sm-4">Sender Department</dt>
                    <dd class="col-sm-8" id="vSenderDept"></dd>
                    <dt class="col-sm-4">Sender Name</dt>
                    <dd class="col-sm-8" id="vSenderName"></dd>
                    <dt class="col-sm-4">Receiver Name</dt>
                    <dd class="col-sm-8" id="vReceiverName"></dd>
                    <dt class="col-sm-4">Receiver Department</dt>
                    <dd class="col-sm-8" id="vReceiverDept"></dd>
                    <dt class="col-sm-4">Department ID</dt>
                    <dd class="col-sm-8" id="vDepartmentID"></dd>
                </dl>
            </div>
        </div>
    </div>
</div>


<!-- ➕ Add Outward Letter Modal -->
<div class="modal fade" id="outwardLetterModal" tabindex="-1" aria-labelledby="outwardLetterModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <form method="post" action="@Url.Action("CreateOutwardLetter", "Clerk")" id="outwardLetterForm">
                @Html.AntiForgeryToken()

                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title" id="outwardLetterModalLabel">Create Outward Letter</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>

                <div class="modal-body row g-3">
                    <div class="col-md-6">
                        <label class="form-label">Letter No</label>
                        <input type="text" name="LetterNo" class="form-control" required />
                    </div>

                    <div class="col-md-6">
                        <label class="form-label">Delivery Mode</label>
                        <input type="text" name="DeliveryMode" class="form-control" required />
                    </div>

                    <div class="col-md-6">
                        <label class="form-label">Reference ID</label>
                        <input type="text" name="ReferenceID" class="form-control" />
                    </div>

                    <div class="col-md-6">
                        <label class="form-label">Subject</label>
                        <input type="text" name="Subject" class="form-control" required />
                    </div>

                    <div class="col-md-12">
                        <label class="form-label">Remark</label>
                        <textarea name="Remarks" class="form-control"></textarea>
                    </div>

                    <div class="col-md-4">
                        <label class="form-label">Priority</label>
                        <select name="Priority" class="form-select">
                            <option value="Normal">Normal</option>
                            <option value="Urgent">Urgent</option>
                        </select>
                    </div>

                    <div class="col-md-4">
                        <label class="form-label">Sender Department</label>
                        <input type="text" class="form-control" name="SenderDepartment" value="@ViewBag.SenderDepartment" readonly />
                    </div>

                    <div class="col-md-4">
                        <label class="form-label">Sender Name</label>
                        <select name="AssignedStaffID" class="form-select">
                            @foreach (var staff in ViewBag.StaffList)
                            {
                                <option value="@staff.StaffID">@staff.Name</option>
                            }
                        </select>
                    </div>

                    <div class="col-md-6">
                        <label class="form-label">Receiver Department</label>
                        <select name="ReceiverDepartment" class="form-select" id="receiverDeptDropdown">
                            @foreach (var dept in ViewBag.DepartmentList)
                            {
                                <option value="@dept.DepartmentName">@dept.DepartmentName</option>
                            }
                            <option value="Other">Other</option>
                        </select>
                        <input type="text" name="ReceiverDepartmentOther" class="form-control mt-2 d-none" id="receiverDeptOther" placeholder="Enter external department" />
                    </div>

                    <div class="col-md-6">
                        <label class="form-label">Receiver Name</label>
                        <input type="text" name="ReceiverName" class="form-control" />
                    </div>

                    <input type="hidden" name="DepartmentID" value="@Session["DepartmentID"]" />
                </div>

                <div class="modal-footer">
                    <button type="submit" class="btn btn-success">📤 Submit</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">❌ Cancel</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="alert alert-success mt-3 d-none" id="outwardSuccessAlert">
    ✅ Outward Letter submitted successfully.
</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            let departmentOptions = @foreach (var dept in ViewBag.DepartmentList) {<text><option value="@dept.DepartmentName">@dept.DepartmentName</option></text>} + '<option value="Other">Other</option>';
            let staffOptions = @foreach (var staff in ViewBag.StaffList) {<text><option value="@staff.Name">@staff.Name</option></text>};

            document.querySelector("#outwardTable").addEventListener("click", function (e) {
                let editBtn = e.target.closest(".btn-inline-edit");
                let saveBtn = e.target.closest(".btn-inline-save");
                let cancelBtn = e.target.closest(".btn-inline-cancel");

                if (editBtn) {
                    let row = editBtn.closest("tr");
                    row.classList.add("editing");

                    let letterNo = row.querySelector(".td-letterno").textContent.trim();
                    let senderName = row.querySelector(".td-sender").textContent.trim();
                    let receiverName = row.querySelector(".td-receivername").textContent.trim();
                    let receiverDept = row.querySelector(".td-receiverdept").textContent.trim();
                    let referenceID = row.querySelector(".td-reference").textContent.trim();

                    row.querySelector(".td-letterno").innerHTML = <input type="text" class="form-control form-control-sm" value="${letterNo}">;
                    row.querySelector(".td-sender").innerHTML = <select class="form-select form-select-sm">${staffOptions}</select>;
                    row.querySelector(".td-sender select").value = senderName;
                    row.querySelector(".td-receivername").innerHTML = <input type="text" class="form-control form-control-sm" value="${receiverName}">;
                    row.querySelector(".td-receiverdept").innerHTML = <select class="form-select form-select-sm">${departmentOptions}</select>;
                    row.querySelector(".td-receiverdept select").value = receiverDept;
                    row.querySelector(".td-reference").innerHTML = <input type="text" class="form-control form-control-sm" value="${referenceID}">;

                    editBtn.outerHTML = <button class="btn btn-sm btn-success btn-inline-save">💾 Save</button> <button class="btn btn-sm btn-secondary btn-inline-cancel">❌ Cancel</button>;
                }

                if (cancelBtn) {
                    location.reload(); // easiest way to reset the row to original state
                }

                if (saveBtn) {
                    let row = saveBtn.closest("tr");
                    let id = row.getAttribute("data-letter-id");
                    let updatedData = {
                        LetterID: id,
                        LetterNo: row.querySelector(".td-letterno input").value.trim(),
                        SenderName: row.querySelector(".td-sender select").value,
                        ReceiverName: row.querySelector(".td-receivername input").value.trim(),
                        ReceiverDepartment: row.querySelector(".td-receiverdept select").value,
                        ReferenceID: row.querySelector(".td-reference input").value.trim()
                    };

                    fetch('@Url.Action("UpdateOutwardLetterInline", "Clerk")', {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                            "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val()
                        },
                        body: JSON.stringify(updatedData)
                    })




                    .then(r => r.json())
                    .then(res => {
                        if (res.success) {
                            row.querySelector(".td-letterno").textContent = res.data.LetterNo;
                            row.querySelector(".td-sender").textContent = res.data.SenderName;
                            row.querySelector(".td-receivername").textContent = res.data.ReceiverName;
                            row.querySelector(".td-receiverdept").textContent = res.data.ReceiverDepartment;
                            row.querySelector(".td-reference").textContent = res.data.ReferenceID;
                            saveBtn.closest("td").innerHTML = <button class="btn btn-sm btn-info btn-view" type="button" data-letter-id="${id}">👁 View</button> <button class="btn btn-sm btn-warning btn-inline-edit" type="button">✏ Edit</button>;
                        } else {
                            alert(res.message || "Error saving changes");
                        }
                    })
                    .catch(err => {
                        console.error(err);
                        alert("Error updating letter.");
                    });
                }
            });
        });
    </script>
}